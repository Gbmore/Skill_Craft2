<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: #f4f4f9;
    }

    h1 {
      margin-bottom: 10px;
    }

    #mode {
      margin-bottom: 20px;
      padding: 10px;
      font-size: 1em;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
    }

    .cell {
      width: 100px;
      height: 100px;
      font-size: 2.5em;
      text-align: center;
      line-height: 100px;
      background: white;
      border: 2px solid #333;
      cursor: pointer;
      transition: background 0.3s;
    }

    .cell:hover {
      background: #eee;
    }

    #status {
      margin: 15px;
      font-size: 1.2em;
      font-weight: bold;
    }

    #reset {
      padding: 10px 20px;
      font-size: 1em;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      background: #007bff;
      color: white;
    }
  </style>
</head>
<body>
  <h1>Tic-Tac-Toe</h1>

  <!-- Mode selector -->
  <select id="mode">
    <option value="pvp">Player vs Player</option>
    <option value="pvc">Player vs Computer</option>
  </select>

  <!-- Game board -->
  <div class="board" id="board"></div>

  <!-- Game status -->
  <div id="status">Player X's turn</div>

  <!-- Reset button -->
  <button id="reset">Reset Game</button>

  <script>
    const boardElement = document.getElementById("board");
    const statusElement = document.getElementById("status");
    const resetButton = document.getElementById("reset");
    const modeSelect = document.getElementById("mode");

    let board = Array(9).fill("");
    let currentPlayer = "X";
    let gameActive = true;
    let mode = "pvp";

    // Winning combinations
    const winPatterns = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    // Create board cells
    function createBoard() {
      boardElement.innerHTML = "";
      board = Array(9).fill("");
      gameActive = true;
      currentPlayer = "X";
      statusElement.textContent = "Player X's turn";

      for (let i = 0; i < 9; i++) {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        cell.dataset.index = i;
        cell.addEventListener("click", handleCellClick);
        boardElement.appendChild(cell);
      }
    }

    // Handle cell click
    function handleCellClick(e) {
      const index = e.target.dataset.index;
      if (board[index] !== "" || !gameActive) return;

      board[index] = currentPlayer;
      e.target.textContent = currentPlayer;

      if (checkWin(currentPlayer)) {
        statusElement.textContent = `Player ${currentPlayer} wins! ðŸŽ‰`;
        gameActive = false;
        return;
      }

      if (board.every(cell => cell !== "")) {
        statusElement.textContent = "It's a draw!";
        gameActive = false;
        return;
      }

      // Switch player
      currentPlayer = currentPlayer === "X" ? "O" : "X";
      statusElement.textContent = `Player ${currentPlayer}'s turn`;

      // If vs computer
      if (mode === "pvc" && currentPlayer === "O" && gameActive) {
        setTimeout(computerMove, 500); // slight delay
      }
    }

    // Computer random move
    function computerMove() {
      let emptyCells = board
        .map((val, idx) => (val === "" ? idx : null))
        .filter(val => val !== null);

      if (emptyCells.length === 0) return;

      const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];
      const cell = boardElement.querySelector(`[data-index='${randomIndex}']`);

      board[randomIndex] = "O";
      cell.textContent = "O";

      if (checkWin("O")) {
        statusElement.textContent = "Computer wins! ðŸ¤–";
        gameActive = false;
        return;
      }

      if (board.every(cell => cell !== "")) {
        statusElement.textContent = "It's a draw!";
        gameActive = false;
        return;
      }

      currentPlayer = "X";
      statusElement.textContent = "Player X's turn";
    }

    // Check for win
    function checkWin(player) {
      return winPatterns.some(pattern =>
        pattern.every(index => board[index] === player)
      );
    }

    // Reset game
    resetButton.addEventListener("click", createBoard);

    // Mode change
    modeSelect.addEventListener("change", (e) => {
      mode = e.target.value;
      createBoard();
    });

    // Initialize
    createBoard();
  </script>
</body>
</html>
